local DIRECTION_LEFT = -1
local DIRECTION_RIGHT = 1
local BASE_VELOCITY = 500
local GRAVITY = 1000
local JUMP_TAKEOFF = 600

function init(self)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3(0,0,0)
	self.groun_contact = false
	self.correction = vmath.vector3(0,0,0)
end


-- function update(self, dt)
-- 
-- end

local function clamp(v,min,max)
	if v < min then return min 
	elseif v > max then return  max 
	else return v end
end

function fixed_update(self, dt)

	self.velocity.y = self.velocity.y - GRAVITY*dt 
	self.velocity.y = clamp(self.velocity.y, -2000, 2000)

	if self.ground_contact then
		self.velocity.y =0
	end
	
	local position = go.get_position()
	position = position + self.velocity*dt
	go.set_position(position)

	animate(self)
	self.velocity.x = 0
	self.ground_contact = false
	self.correction.x = 0
	self.correction.y = 0
end

function handle_level_collisions(self, normal, distance)

	distance = distance* vmath.length(normal)

	if distance > 0 then 
		local extend = vmath.project(self.correction,normal*distance)
		if extend < 1 then
			local compensation = (distance - distance*extend)*normal
			go.set_position(go.get_position()+compensation)
			self.correction = self.correction + compensation
		end

	end

	if math.abs(normal.x) > 0 then
		self.velocity.x = 0
	end
	if normal.y> 0 then
		self.ground_contact = true
		self.velocity.y = 0
	end

	if normal.y<0 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("contact_point_response")) and message.other_group == hash("Level") then
		handle_level_collisions(self, message.normal, message.distance)
	end
end


function walk(self)
	self.velocity.x = BASE_VELOCITY * self.direction
end

function flip(direction)
	sprite.set_hflip("#sprite", direction<0)
end


function animate(self) 
	if self.ground_contact then
		if self.velocity.x == 0 then
			sprite.play_flipbook("#sprite", "Idle")
		else
			sprite.play_flipbook("#sprite", "Run")
		end
	else
		sprite.play_flipbook("#sprite", "Jump")
	end
end



function on_input(self, action_id, action)
	if action_id ~= hash("Jump") then
		self.direction = (action_id == hash("Right")) and DIRECTION_RIGHT or DIRECTION_LEFT
		walk(self)
		flip(self.direction)
	elseif action.pressed and self.ground_contact then
		self.velocity.y = JUMP_TAKEOFF
		self.ground_contact = false
	end
	
	
-- 	local position = go.get_position()
-- 	if(go.get_position().x > 450) then
-- 		tilemap.set_visible("/Ground#Level", "Ground", false)
-- 	end
-- 
-- 	print(go.get_position())
end
